
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jan 14 21:31:47 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Fri Jan 14 21:31:47 CET 2022
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\003\006\000\002\002\004\000\002\004" +
    "\006\000\002\005\004\000\002\005\003\000\002\006\006" +
    "\000\002\022\005\000\002\022\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\017\004\000\002\017\003\000\002\020\006\000\002\020" +
    "\006\000\002\020\007\000\002\020\007\000\002\020\003" +
    "\000\002\010\005\000\002\010\003\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\035\005\001\002\000\004\002\122\001" +
    "\002\000\004\014\006\001\002\000\004\015\007\001\002" +
    "\000\004\036\011\001\002\000\004\002\001\001\002\000" +
    "\004\022\012\001\002\000\006\016\ufffa\021\ufffa\001\002" +
    "\000\014\006\ufffd\007\ufffd\022\ufffd\033\ufffd\036\ufffd\001" +
    "\002\000\014\006\027\007\035\022\034\033\036\036\011" +
    "\001\002\000\006\016\017\021\016\001\002\000\004\022" +
    "\026\001\002\000\012\004\020\005\024\027\022\034\023" +
    "\001\002\000\004\020\ufff9\001\002\000\004\020\025\001" +
    "\002\000\004\020\ufff7\001\002\000\004\020\ufff6\001\002" +
    "\000\004\020\ufff8\001\002\000\014\006\ufffc\007\ufffc\022" +
    "\ufffc\033\ufffc\036\ufffc\001\002\000\006\016\ufffb\021\ufffb" +
    "\001\002\000\004\014\116\001\002\000\020\006\uffef\007" +
    "\uffef\022\uffef\032\uffef\033\uffef\036\uffef\037\uffef\001\002" +
    "\000\016\006\027\007\035\022\037\033\036\036\011\037" +
    "\114\001\002\000\014\006\ufffe\007\ufffe\022\ufffe\033\ufffe" +
    "\036\ufffe\001\002\000\016\006\ufff4\007\ufff4\022\ufff4\033" +
    "\ufff4\036\ufff4\037\ufff4\001\002\000\010\016\ufffa\017\105" +
    "\021\ufffa\001\002\000\004\014\110\001\002\000\014\006" +
    "\027\007\035\022\037\033\036\036\011\001\002\000\004" +
    "\017\105\001\002\000\004\032\041\001\002\000\016\014" +
    "\051\022\052\023\056\024\050\025\047\026\046\001\002" +
    "\000\054\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\015\uffdb\020\uffdb\022\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\001\002\000\050\006\uffe9\007\uffe9" +
    "\010\076\012\071\015\uffe9\020\uffe9\022\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\036\uffe9\037\uffe9\040\100\041\074" +
    "\042\073\043\072\044\075\045\101\001\002\000\030\006" +
    "\uffed\007\uffed\015\uffed\020\uffed\022\uffed\030\067\031\uffed" +
    "\032\uffed\033\uffed\036\uffed\037\uffed\001\002\000\022\006" +
    "\ufff3\007\ufff3\022\ufff3\031\065\032\ufff3\033\ufff3\036\ufff3" +
    "\037\ufff3\001\002\000\054\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\015\uffd8\020\uffd8\022\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\001\002\000\054" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015" +
    "\uffd7\020\uffd7\022\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\001\002\000\054\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\015\uffd6\020\uffd6\022\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\001\002\000" +
    "\016\014\051\022\052\023\056\024\050\025\047\026\046" +
    "\001\002\000\054\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\015\uffdc\020\uffdc\022\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\001\002\000\054\006\uffe0" +
    "\007\uffe0\010\uffe0\011\060\012\uffe0\013\057\015\uffe0\020" +
    "\uffe0\022\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\001\002\000\054\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\015\uffdd\020\uffdd\022\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\001\002\000\030\006" +
    "\uffeb\007\uffeb\015\uffeb\020\uffeb\022\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\036\uffeb\037\uffeb\001\002\000\054\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9" +
    "\020\uffd9\022\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\001\002\000\016\014\051\022\052\023\056\024" +
    "\050\025\047\026\046\001\002\000\016\014\051\022\052" +
    "\023\056\024\050\025\047\026\046\001\002\000\054\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\015\uffde" +
    "\020\uffde\022\uffde\030\uffde\031\uffde\032\uffde\033\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\001\002\000\054\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\015\uffdf\020\uffdf\022\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\001\002\000\006" +
    "\015\064\031\065\001\002\000\054\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\015\uffda\020\uffda\022\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\001\002" +
    "\000\016\014\051\022\052\023\056\024\050\025\047\026" +
    "\046\001\002\000\030\006\uffee\007\uffee\015\uffee\020\uffee" +
    "\022\uffee\030\067\031\uffee\032\uffee\033\uffee\036\uffee\037" +
    "\uffee\001\002\000\016\014\051\022\052\023\056\024\050" +
    "\025\047\026\046\001\002\000\030\006\uffec\007\uffec\015" +
    "\uffec\020\uffec\022\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\036\uffec\037\uffec\001\002\000\016\014\051\022\052\023" +
    "\056\024\050\025\047\026\046\001\002\000\016\014\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\001\002\000" +
    "\016\014\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\001\002\000\016\014\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\001\002\000\016\014\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\001\002\000\016\014\051\022" +
    "\052\023\056\024\050\025\047\026\046\001\002\000\016" +
    "\014\051\022\052\023\056\024\050\025\047\026\046\001" +
    "\002\000\016\014\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\001\002\000\016\014\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\001\002\000\034\006\uffea\007\uffea" +
    "\010\076\012\071\015\uffea\020\uffea\022\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\036\uffea\037\uffea\001\002\000\054" +
    "\006\uffe2\007\uffe2\010\uffe2\011\060\012\uffe2\013\057\015" +
    "\uffe2\020\uffe2\022\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\001\002\000\054\006\uffe1\007\uffe1\010\uffe1" +
    "\011\060\012\uffe1\013\057\015\uffe1\020\uffe1\022\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\001\002\000" +
    "\016\014\051\022\052\023\056\024\050\025\047\026\046" +
    "\001\002\000\006\020\107\031\065\001\002\000\020\006" +
    "\ufff2\007\ufff2\022\ufff2\032\ufff2\033\ufff2\036\ufff2\037\ufff2" +
    "\001\002\000\016\014\051\022\052\023\056\024\050\025" +
    "\047\026\046\001\002\000\006\015\112\031\065\001\002" +
    "\000\004\020\113\001\002\000\020\006\ufff0\007\ufff0\022" +
    "\ufff0\032\ufff0\033\ufff0\036\ufff0\037\ufff0\001\002\000\022" +
    "\002\uffff\006\uffff\007\uffff\022\uffff\032\uffff\033\uffff\036" +
    "\uffff\037\uffff\001\002\000\016\006\ufff5\007\ufff5\022\ufff5" +
    "\033\ufff5\036\ufff5\037\ufff5\001\002\000\004\022\117\001" +
    "\002\000\004\015\120\001\002\000\004\020\121\001\002" +
    "\000\020\006\ufff1\007\ufff1\022\ufff1\032\ufff1\033\ufff1\036" +
    "\ufff1\037\ufff1\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\010\005\013\006\012\022\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\027" +
    "\006\031\017\030\020\032\022\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\027\020" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\027\020\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\044" +
    "\011\052\012\053\013\042\014\043\015\054\021\041\001" +
    "\001\000\002\001\001\000\004\016\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\062\011\052\012\053" +
    "\013\042\014\043\015\054\021\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\061\021\041\001\001\000" +
    "\006\012\060\021\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\052\012\053\013\042\014\065\015\054\021\041\001\001" +
    "\000\002\001\001\000\014\011\052\012\053\013\042\015" +
    "\067\021\041\001\001\000\002\001\001\000\010\011\103" +
    "\012\053\021\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\102" +
    "\012\053\021\041\001\001\000\012\011\052\012\053\013" +
    "\101\021\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\105\011\052\012\053\013\042\014\043\015\054" +
    "\021\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\110\011\052\012\053\013\042\014\043\015\054" +
    "\021\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



   public int errNo = 0;
   public int warnNo = 0;

   SymbolTable symbolTable;

   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   java_cup.runtime.Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo == 0 && parser.warnNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo
		         + " Broj upozorenja: " + parser.warnNo );
	  }
	  catch( Exception e )
	  {
		   System.out.println(e);
	  }
   }

   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name +
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }

   public void syntax_error(Symbol cur_token)
   {

   }

   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }

   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Const ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 16");
           RESULT = new Constant( parser.symbolTable.getType( "char" ), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Const ::= BOOLCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 16");
           RESULT = new Constant( parser.symbolTable.getType( "bool" ), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Const ::= REALCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 16");
          RESULT = new Constant( parser.symbolTable.getType( "real" ), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Const ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 16");
          RESULT = new Constant( parser.symbolTable.getType( "integer" ), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Factor ::= LEFTPAR Expression RIGHTPAR 
            {
              Type RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            System.out.println("Redukcija 15");
            RESULT=e;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Factor ::= Const 
            {
              Type RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 15");
            RESULT=c.type;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Factor ::= ID 
            {
              Type RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println("Redukcija 15");
		      Variable var = parser.symbolTable.getVar( ime );
		      if ( var == null )
		      {
		      	System.out.println( "Greska u liniji " + parser.getLine() +
		      		": promenljiva " + ime + " nije deklarisana.");
		      	RESULT = parser.symbolTable.getType( "unknown" );
		      	parser.errNo++;
		      }
		      else
		      {
		      	RESULT = var.type;
		      	if ( var.last_def == -1 )
		      	{
		      		System.out.println( "Greska u liniji " + parser.getLine() +
		      			": promenljiva " + ime + " nije inicijalizovana.");
		      		parser.errNo++;
		      	}
		        var.last_use = parser.getLine();
		      }
		   
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Term ::= Factor 
            {
              Type RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type f = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 14");
            RESULT=f;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Term ::= Term DIV Factor 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              System.out.println("Redukcija 14");
              if (i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN || i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": mogu se deliti samo numericki tipovi, lefi op je " + i1.tkind + ", desni op je " + i2.tkind );
                  parser.errNo++;
                  RESULT = parser.symbolTable.getType( "unknown" );
              }else if ( i1.tkind != i2.tkind ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": za operaciju deljenja operandi moraju biti istog tipa");
              	parser.errNo++;
              	RESULT = parser.symbolTable.getType( "unknown" );
              }else{
                RESULT = i1.type;
              }
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Term ::= Term MUL Factor 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              System.out.println("Redukcija 14");
              if (i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN || i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": mogu se mnoziti samo numericki tipovi, lefi op je " + i1.tkind + ", desni op je " + i2.tkind );
                  parser.errNo++;
                  RESULT = parser.symbolTable.getType( "unknown" );
              }else if ( i1.tkind != i2.tkind ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": za mnozenje operandi moraju biti istog tipa");
              	parser.errNo++;
              	RESULT = parser.symbolTable.getType( "unknown" );
              }else{
                RESULT = i1.type;
              }
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ArExpression ::= Term 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 13");
            RESULT=t;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ArExpression ::= ArExpression MINUS Term 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              System.out.println("Redukcija 13");
              if (i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN || i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": mogu se oduzimati samo numericki tipovi, lefi op je " + i1.tkind + ", desni op je " + i2.tkind );
                  parser.errNo++;
                  RESULT = parser.symbolTable.getType( "unknown" );
              }else if ( i1.tkind != i2.tkind ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": za operaciju oduzimanja operandi moraju biti istog tipa");
              	parser.errNo++;
              	RESULT = parser.symbolTable.getType( "unknown" );
              }else{
                RESULT = i1.type;
              }
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ArExpression ::= ArExpression PLUS Term 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              System.out.println("Redukcija 13");
              if (i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN || i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": mogu se sabirati samo numericki tipovi, lefi op je " + i1.tkind + ", desni op je " + i2.tkind );
                  parser.errNo++;
                  RESULT = parser.symbolTable.getType( "unknown" );
              }else if ( i1.tkind != i2.tkind ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": za operaciju sabiranja operandi moraju biti istog tipa");
              	parser.errNo++;
              	RESULT = parser.symbolTable.getType( "unknown" );
              }else{
                RESULT = i1.type;
              }
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= GREATEREQUAL 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 12");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= GREATER 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 12");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= NOTEQUAL 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 12");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RelOp ::= EQUALEQUAL 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 12");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelOp ::= LESSEQUAL 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 12");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RelOp ::= LESS 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 12");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RelExpression ::= ArExpression 
            {
              Type RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 11");
            RESULT=a;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                    System.out.println("Redukcija 11");
                    if (i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ||
                        i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN) {
                        System.out.println("Error in line " + parser.getLine() + ": " + " operandi moraju biti numerickog tipa");
                        parser.errNo++;
                        RESULT = parser.symbolTable.getType( "unknown" );
                    }
                    else {
                        RESULT = parser.symbolTable.getType( "bool" );
                    }
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AndExpression ::= RelExpression 
            {
              Type RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 10");
            RESULT=r;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AndExpression ::= AndExpression AND RelExpression 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                     System.out.println("Redukcija 10");
                    if (i1.tkind != Type.BOOL || i2.tkind != Type.BOOL) {
                        System.out.println("Error in line " + parser.getLine() + ": " + " ne mogu se koristiti logicki operatori sa vrednostima koje nisu BOOL");
                        parser.errNo++;
                        RESULT = parser.symbolTable.getType( "unknown" );
                    }
                    else {
                        RESULT = parser.symbolTable.getType( "bool" );
                    }
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= AndExpression 
            {
              Type RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 9");
            RESULT=a;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= Expression OR AndExpression 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                     System.out.println("Redukcija 9");
                    if (i1.tkind != Type.BOOL || i2.tkind != Type.BOOL) {
                        System.out.println("Error in line " + parser.getLine() + ": " + " ne mogu se koristiti logicki operatori sa vrednostima koje nisu BOOL");
                        parser.errNo++;
                        RESULT = parser.symbolTable.getType( "unknown" );
                    }
                    else {
                        RESULT = parser.symbolTable.getType( "bool" );
                    }
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= Block 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 8.5");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= WRITE LEFTPAR Expression RIGHTPAR SEMI 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 8.4");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= READ LEFTPAR ID RIGHTPAR SEMI 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
                                System.out.println("Redukcija 8.3");
                              Variable var = parser.symbolTable.getVar( ime );
                              if ( var == null )
                              {
                                System.out.println( "Greska u liniji " + parser.getLine() +
                                    ": promenljiva " + ime + " nije deklarisana.");
                                RESULT = parser.symbolTable.getType( "unknown" );
                                parser.errNo++;
                              }
                              else
                              {
                                if ( var.last_def == -1 )
                                {
                                    System.out.println( "Greska u liniji " + parser.getLine() +
                                        ": promenljiva " + ime + " nije inicijalizovana.");
                                    parser.errNo++;
                                }
                                var.last_use = parser.getLine();
                              }
                           
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= ID ASSIGN Expression SEMI 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
                              System.out.println("Redukcija 8.2");
                              Variable var = parser.symbolTable.getVar( ime );
                              if ( var == null ){
                                System.out.println( "Greska u liniji " + parser.getLine() +
                                    ": promenljiva " + ime + " nije deklarisana.");
                                parser.errNo++;
                              }else{
                                   var.last_def = parser.getLine();
                              }
                              if (var.type.tkind != i.tkind){
                                System.out.println( "Greska u liniji " + parser.getLine() +
                                    ": ne moze se odraditi dodela vrednosti razlicitih tipova");
                                parser.errNo++;
                              }
                         
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= DO Statement WHILE Expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                                System.out.println("Redukcija 8.1");
                                 if ( e.tkind != Type.BOOL)
                                  {
                                    System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                       "expression u while nije tipa bool");
                                    parser.errNo++;
                                  }
                         
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 7");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 7");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOL 
            {
              Type RESULT = null;
		
            System.out.println("Redukcija 6");
            RESULT = parser.symbolTable.getType( "bool" );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              Type RESULT = null;
		
           System.out.println("Redukcija 6");
           RESULT = parser.symbolTable.getType( "real" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= CHAR 
            {
              Type RESULT = null;
		
           System.out.println("Redukcija 6");
           RESULT = parser.symbolTable.getType( "char" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              Type RESULT = null;
		
           System.out.println("Redukcija 6");
           RESULT = parser.symbolTable.getType( "integer" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                System.out.println("Redukcija 5");
                RESULT = new ArrayList();
                RESULT.add( ime );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
			    System.out.println("Redukcija 5");
			 	RESULT = niz;
			 	RESULT.add( ime );
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= NameList DOTDOT Type SEMI 
            {
              Object RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
				    System.out.println("Redukcija 4");
					for ( int i=0; i<niz.size(); i++ )
					{
					   String ime = (String) niz.get(i);

					   if ( ! parser.symbolTable.addVar( ime, t ) )
					   {
					   	 System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                   			"Promenljiva " + ime + " je vec deklarisana." );
            		     parser.errNo++;
					   }
					}
				
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarList ::= VarDecl 
            {
              Object RESULT = null;
		
			 	System.out.println("Redukcija 3");
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarList ::= VarList VarDecl 
            {
              Object RESULT = null;
		
			 	System.out.println("Redukcija 3");
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= CURLYBRAL VarList StatementList CURLYBRAR 
            {
              Object RESULT = null;
		
			 	System.out.println("Redukcija 2");
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
			 	System.out.println("Redukcija 1");
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

